#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoSeparator.h>
#include <VolumeViz/nodes/SoTransferFunction.h>
#include <VolumeViz/nodes/SoVolumeData.h>
#include <VolumeViz/nodes/SoVolumeRender.h>
#include <VolumeViz/nodes/SoVolumeRendering.h>

static uint8_t *generate8bitVoxelSet(SbVec3s & dim) {
  const size_t blocksize = dim[0] * dim[1] * dim[2];
  uint8_t * voxels = new uint8_t[blocksize];
  (void)memset(voxels, 0, blocksize);
  float t = 0;
  while (t < 50) {
  SbVec3f v(sin((t + 1.4234) * 1.9) * sin(t) * 0.45 + 0.5,
  cos((t * 2.5) - 10) * 0.45 + 0.5,
  cos((t - 0.23123) * 3) * sin(t + 0.5) * cos(t) * 0.45 + 0.5);
  assert(v[0] < 1.0f && v[1] < 1.0f && v[2] < 1.0f);
  const int nx = int(dim[0] * v[0]);
  const int ny = int(dim[1] * v[1]);
  const int nz = int(dim[2] * v[2]);
  const int memposition = nz*dim[0]*dim[1] + ny*dim[0] + nx;
  voxels[memposition] = (uint8_t)(255.0 * cos(t));
  t += 0.001;
  }
  return voxels;
}

int main(int argc, char ** argv) {
  auto window = So@Gui@::init(argv[0]);
  SoVolumeRendering::init();
  SoSeparator * root = new SoSeparator;
  root->ref();
  SbVec3s dim = SbVec3s(64, 64, 64);
  uint8_t * voxeldata = generate8bitVoxelSet(dim);
  // Add SoVolumeData to scene graph
  SoVolumeData * volumedata = new SoVolumeData();
  volumedata->setVolumeData(dim, voxeldata, SoVolumeData::UNSIGNED_BYTE);
  root->addChild(volumedata);
  // Add TransferFunction (color map) to scene graph
  SoTransferFunction * transfunc = new SoTransferFunction();
  root->addChild(transfunc);
  // Add VolumeRender to scene graph
  SoVolumeRender * volrend = new SoVolumeRender();
  root->addChild(volrend);
  auto viewer = new So@Gui@ExaminerViewer(window);
  viewer->setBackgroundColor(SbColor(0.1f, 0.3f, 0.5f));
  viewer->setSceneGraph(root);
  viewer->show();
  So@Gui@::show(window);
  So@Gui@::mainLoop();
  delete viewer;
  root->unref();
  delete[] voxeldata;
  return 0;
}
